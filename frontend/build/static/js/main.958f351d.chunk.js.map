{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","React","createElement","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","key","isSameSender","isLastMessage","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","process","secure","transports","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.958f351d.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import React from 'react';\nimport { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","// Add this import at the top of your file\nimport React from 'react';\nimport { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import React from 'react';\nimport { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import React from \"react\";\nimport { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import React from \"react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import React from 'react';\nimport { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import React from 'react';\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT =   process.env.REACT_APP_API_URL //|| \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT, {\n        secure: true,\n        transports: ['websocket']\n    });\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import React from 'react'; // Add this line\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import React from \"react\";\nimport { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import React from 'react'; // Ensure this import is present\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import React from \"react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import React from 'react'; // Add this line\nimport { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import React from 'react';\nimport { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import React from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}